import{_ as i,C as e,o as c,c as p,H as n,w as r,Y as o,k as a,a as s}from"./chunks/framework.98e11516.js";const v=JSON.parse('{"title":"x gitconfig","description":"x gitconfig | x-cmd module | 管理 git config","frontmatter":{"head":[["meta",{"name":"og:title","content":"x gitconfig | x-cmd"}],["meta",{"name":"og:description","content":"管理 git config"}],["meta",{"name":"description","content":"x gitconfig | x-cmd module | 管理 git config"}]]},"headers":[],"relativePath":"mod/gitconfig.md","filePath":"mod/gitconfig.md"}'),d={name:"mod/gitconfig.md"},h=o(`<h1 id="x-gitconfig" tabindex="-1">x gitconfig <a class="header-anchor" href="#x-gitconfig" aria-label="Permalink to &quot;x gitconfig&quot;">​</a></h1><p class="x-desc">管理 git config</p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>使用 yml 声明式配置文件管理项目 git config，开箱即用管理项目 <code>.git/config</code> 的解决方案。</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><ol><li>在项目根路径创建声明式配置文件 <code>.x-cmd/git/config.yml</code></li><li>编写 git 配置，我们提供两种配置编写，以下是示例代码</li></ol><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 1. 使用 \`.\` 进行连接关系</span></span>
<span class="line"><span style="color:#85E89D;">core.editor</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">vim</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 使用对象嵌套</span></span>
<span class="line"><span style="color:#85E89D;">core</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">editor</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">vim</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 1. 使用 \`.\` 进行连接关系</span></span>
<span class="line"><span style="color:#22863A;">core.editor</span><span style="color:#24292E;">: </span><span style="color:#032F62;">vim</span></span>
<span class="line"><span style="color:#6A737D;"># 2. 使用对象嵌套</span></span>
<span class="line"><span style="color:#22863A;">core</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">editor</span><span style="color:#24292E;">: </span><span style="color:#032F62;">vim</span></span></code></pre></div><ol start="3"><li>运行命令进行变更应用 <code>x gitconfig apply</code></li></ol><h2 id="结合-theme-模块提供变更提示" tabindex="-1">结合 theme 模块提供变更提示 <a class="header-anchor" href="#结合-theme-模块提供变更提示" aria-label="Permalink to &quot;结合 theme 模块提供变更提示&quot;">​</a></h2><h2 id="clone-仓库后进行配置" tabindex="-1"><code>clone</code> 仓库后进行配置 <a class="header-anchor" href="#clone-仓库后进行配置" aria-label="Permalink to &quot;\`clone\` 仓库后进行配置&quot;">​</a></h2>`,10),g=o('<h2 id="子命令" tabindex="-1">子命令 <a class="header-anchor" href="#子命令" aria-label="Permalink to &quot;子命令&quot;">​</a></h2><div class="table-wrap"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="#x-gitconfig-apply">x gitconfig apply</a></td><td>应用 git 配置 yml</td></tr><tr><td><a href="#x-gitconfig-themehintrequired">x gitconfig _themehintrequired</a></td><td>检查配置yml和hook文件的时间是否符合</td></tr></tbody></table></div><h3 id="x-gitconfig-apply" tabindex="-1">x gitconfig apply <a class="header-anchor" href="#x-gitconfig-apply" aria-label="Permalink to &quot;x gitconfig apply&quot;">​</a></h3><p>应用 git 配置 yml</p><ul><li><strong>使用</strong> :</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gitconfig</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gitconfig</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span></span></code></pre></div><h3 id="x-gitconfig-themehintrequired" tabindex="-1">x gitconfig _themehintrequired <a class="header-anchor" href="#x-gitconfig-themehintrequired" aria-label="Permalink to &quot;x gitconfig _themehintrequired&quot;">​</a></h3><p>检查配置yml和hook文件的时间是否符合</p><ul><li><strong>使用</strong> :</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">gitconfig</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_themehintrequired</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gitconfig</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_themehintrequired</span></span></code></pre></div><br>',11),y=a("h2",{id:"相关链接",tabindex:"-1"},[s("相关链接 "),a("a",{class:"header-anchor",href:"#相关链接","aria-label":'Permalink to "相关链接"'},"​")],-1),m=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"TIP"),a("p",null,[s("在交互式终端中（如 zsh, bash ...），可以使用 "),a("kbd",null,"Tab"),s(" 获取补全信息")]),a("p",null,[s("运行 "),a("code",null,"CMD SUBCOMMAND --help"),s(" 可以获取命令的更多信息")])],-1);function u(f,_,x,E,b,k){const t=e("AdsContent"),l=e("DocsLinkCard");return c(),p("div",null,[h,n(t),g,n(l,null,{default:r(()=>[y]),_:1}),m])}const q=i(d,[["render",u]]);export{v as __pageData,q as default};

import{_ as t,C as o,o as p,c,H as n,w as r,k as s,a,Y as h}from"./chunks/framework.98e11516.js";const P=JSON.parse('{"title":"x sha1|sha256|sha512","description":"x sha1 | x-cmd module | 计算文件的 SHA1 散列值","frontmatter":{"head":[["meta",{"name":"og:title","content":"x sha1 | x-cmd"}],["meta",{"name":"og:description","content":"计算文件的 SHA1 散列值"}],["meta",{"name":"description","content":"x sha1 | x-cmd module | 计算文件的 SHA1 散列值"}]]},"headers":[],"relativePath":"mod/sha1.md","filePath":"mod/sha1.md"}'),d={name:"mod/sha1.md"},i=s("h1",{id:"x-sha1-sha256-sha512",tabindex:"-1"},[a("x sha1|sha256|sha512 "),s("a",{class:"header-anchor",href:"#x-sha1-sha256-sha512","aria-label":'Permalink to "x sha1|sha256|sha512"'},"​")],-1),y=s("p",{class:"x-desc"},"计算文件的 SHA1 散列值",-1),E=s("p",null,"根据当前平台已有的可执行文件，自动选用 shasum 或者 sha1sum，计算文件的 SHA1.",-1),F=s("p",null,"如果传入参数，这些参数会被视为文件路径。此时输出统一为：按照参数的传入顺序，一行对应一个文件散列值，以换行符为结尾。",-1),u=s("p",null,[a("如果不传入参数，则会从 "),s("code",null,"stdin"),a(" 读入内容，将计算其 SHA1 散列值输出。")],-1),_=s("p",null,"如果你需要计算 sha256 或者 sha3 或者 sha512，只需要本文命令中的 sha1 改为 sha256，或者 sha3，或者 sha512，即可。",-1),C=s("p",null,"另外， sha256 可以简写为 sha2， sha512可以简写为 sha5",-1),m=h("",12),x=s("h2",{id:"相关链接",tabindex:"-1"},[a("相关链接 "),s("a",{class:"header-anchor",href:"#相关链接","aria-label":'Permalink to "相关链接"'},"​")],-1),b=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[a("在交互式终端中（如 zsh, bash ...），可以使用 "),s("kbd",null,"Tab"),a(" 获取补全信息")]),s("p",null,[a("运行 "),s("code",null,"CMD SUBCOMMAND --help"),a(" 可以获取命令的更多信息")])],-1);function g(v,k,B,A,f,S){const l=o("AdsContent"),e=o("DocsLinkCard");return p(),c("div",null,[i,y,E,F,u,_,C,n(l),m,n(e,null,{default:r(()=>[x]),_:1}),b])}const H=t(d,[["render",g]]);export{P as __pageData,H as default};

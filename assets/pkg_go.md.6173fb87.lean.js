import{_ as n,C as t,o as s,c as i,H as r,w as o,k as l,a as e}from"./chunks/framework.98e11516.js";const j=JSON.parse('{"title":"go","titleTemplate":"x-cmd package | 由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言","description":"x-cmd package go | 由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言","frontmatter":{"name":"go","titleTemplate":"x-cmd package | 由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言","head":[["meta",{"name":"og:title","content":"go | x-cmd package"}],["meta",{"name":"og:description","content":"由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言"}],["meta",{"name":"description","content":"x-cmd package go | 由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言"}]],"links":[{"type":"1min","text":"go","link":"/1min/go"},{"type":"mod","text":"`x env` => 文档","link":"/mod/env"}],"homepage":"https://golang.google.cn/dl/","license":"MIT","version":{"stable":"1.20.3"},"support":["win/x64","linux/x64","linux/arm64","darwin/x64","darwin/arm64"],"source":{"official":["https://go.dev/dl","https://golang.google.cn/dl"]},"aside":false,"outline":false,"x-term-speg":"pkg/go.cn","x-term-name":"go","x-term-desc":"由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言","x-term-size":"large"},"headers":[],"relativePath":"pkg/go.md","filePath":"pkg/go.md"}'),c={name:"pkg/go.md"},g=l("h1",{id:"go",tabindex:"-1"},[e("go "),l("a",{class:"header-anchor",href:"#go","aria-label":'Permalink to "go"'},"​")],-1),d=l("p",{class:"x-desc"},"由 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的开源编程语言",-1),u=l("h2",{id:"简介",tabindex:"-1"},[e("简介 "),l("a",{class:"header-anchor",href:"#简介","aria-label":'Permalink to "简介"'},"​")],-1),h=l("p",null,"Go 语言（或 Golang）是 Google 开发的开源编程语言，诞生于 2006 年。其设计目标是“兼具 Python 等动态语言的开发速度和 C/C++ 等编译型语言的性能与安全性”。语法接近 C 语言，但对于变量的声明有所不同。支持垃圾回收功能。",-1),m=l("ol",null,[l("li",null,[l("strong",null,"原生支持并发"),e("：在多核并发上拥有原生的设计优势，无须第三方库、开发者的编程技巧和开发经验。")]),l("li",null,[l("strong",null,"代码风格统一"),e("：代码的格式化不再是开发者的个人喜好，而是一种强制性的规范。其有统一的一套格式化工具 "),l("code",null,"go fmt"),e("，保证了不同开发者编写的代码风格统一。")]),l("li",null,[l("strong",null,"语法简洁"),e("：语言风格类似于 C 语言，但是去掉了很多 C 语言中很少使用的语法，如继承、重载、泛型、异常、构造函数和操作符重载等。这些语法的去除，使得 Go 语言的语法更加简洁，易于学习和使用。")]),l("li",null,[l("strong",null,"自动垃圾回收"),e("：开发者不需要关心内存的分配和回收，大大降低了开发者的负担。")])],-1),p=l("h2",{id:"首次用户",tabindex:"-1"},[e("首次用户 "),l("a",{class:"header-anchor",href:"#首次用户","aria-label":'Permalink to "首次用户"'},"​")],-1),_=l("ol",null,[l("li",null,"本文的 demo 展现了利用 x-cmd 快速启用 go 编译并运行一个 hello world 程序的过程。"),l("li",null,[e("x-cmd 提供了 "),l("a",{href:"/1min/go"},"1min"),e(" 教程，里面展示了如何使用 "),l("code",null,"go fmt"),e(", "),l("code",null,"go build"),e("，以及网络，进程等基础功能。")])],-1),b=l("h2",{id:"技术特点",tabindex:"-1"},[e("技术特点 "),l("a",{class:"header-anchor",href:"#技术特点","aria-label":'Permalink to "技术特点"'},"​")],-1),k=l("ol",null,[l("li",null,[l("strong",null,"强制规范的代码风格"),e("： "),l("ul",null,[l("li",null,"命名大小写有严格的要求，例如，npm package ID，在 Go 内，一率采用严格驼峰风格，统一为 NpmPackageID，而不是 NPMPackgeID 或 NpmPackageID。"),l("li",null,"代码文件编译前强制以官方指定的统一风格进行格式化：从结尾空行，到行尾去空格等等，不再是个选择，在编译前强制执行。"),l("li",null,"这些举措虽然有争议，但客观上减少项目团队关于风格统一的争吵（某种程度，Go 语言开发团队扛起了原本由项目管理者所承担的怨念），利于团队聚集，并快速展开合作。")])]),l("li",null,[l("strong",null,"简单且开箱即用的包管理、代码测试，格式化、构建、运行工具"),e("： "),l("ul",null,[l("li",null,"包管理（go get）：可以根据要求和实际情况从互联网上下载或更新指定的代码包及其依赖包，并对它们进行编译和安装。"),l("li",null,"代码测试（go test）：用于对 Go 语言编写的程序进行测试。"),l("li",null,"代码格式化（go fmt）：用于格式化 Go 语言的源代码文件。"),l("li",null,"代码构建（go build）： 用于编译指定的源代码文件或代码包及其依赖包。"),l("li",null,"包运行（go run）：用于编译并运行指定的源代码文件或代码包。")])]),l("li",null,[l("strong",null,"并发机制"),e("：以 "),l("code",null,"go routine"),e(" 为特色的并发机制，非常容易理解，同时也不需要引入额外复杂的开发模式。")]),l("li",null,[l("strong",null,"交叉编译自"),e("：带的编译器能够轻松交叉编译出能在适合在其它系统和硬件平台运行的二进制执行文件")]),l("li",null,[l("strong",null,"WebAssembly"),e("：Go 是较早在其编译工具链直接提供 WebAssembly 作为编译目标的语言，其高效和编译工具的高效简单使其在 WASM 领域有着一定的竞争优势")])],-1),G=l("p",null,"由于上述的特点，go在最近十年广泛应用于IO效率要求较高的网络应用、云计算和分布式网络相关的工具和项目。",-1),x=l("h2",{id:"竞品分析",tabindex:"-1"},[e("竞品分析 "),l("a",{class:"header-anchor",href:"#竞品分析","aria-label":'Permalink to "竞品分析"'},"​")],-1),f=l("h3",{id:"编译型语言",tabindex:"-1"},[e("编译型语言 "),l("a",{class:"header-anchor",href:"#编译型语言","aria-label":'Permalink to "编译型语言"'},"​")],-1),y=l("p",null,"Rust，Zig，这类新型的编译型开发语言，经常拿来与 Go 进行对比。",-1),v=l("ol",null,[l("li",null,"运行效率上，在一些场景 Go 可能会稍逊。"),l("li",null,"Go 为了保证编译速度，跳过了编译时的部分优化。"),l("li",null,"Go 自带 GC，不需要用户自行管理内存，来简化编程模型；客观也会因为 GC 而导致在响应时间会有所影响。"),l("li",null,"对于高吞吐量，高并发的高负荷的复杂程序，Go 在效率上的差距并不明显；相反因为 Go 的开发模型往往更简单，从而提升了项目的可维护性。"),l("li",null,"当然，对于追求极致性能的团队，在需求相对稳定的项目，rust 和 zig 以及 传统的 c/c++ 自然是更佳的选择"),l("li",null,"由于 Go 自带 GC，编译出的 WASM 尺寸，相比 Rust 和 C/C++ 更大。")],-1),P=l("h3",{id:"解释型语言",tabindex:"-1"},[e("解释型语言 "),l("a",{class:"header-anchor",href:"#解释型语言","aria-label":'Permalink to "解释型语言"'},"​")],-1),C=l("p",null,"如 Node/Deno/Bun，Python 等，这类语言的优势在于开发效率，但在运行效率上，相比编译型语言，有一定的劣势。",-1),E=l("ol",null,[l("li",null,"虽然上述编译语言都引入了语言级别的 异步，但计算效率还是编译型语言的优势。"),l("li",null,"虽然非编译型能够快速部署（尤其是在 x-cmd、nvm等工具的加持下），但在没有安装该语言的情况下，语言的安装包压缩包至少在20MB以上。而 Go 的项目二进制压缩包包很少超过15MB。一般网络型的应用都在 5MB左右，甚至更小。"),l("li",null,"启动时间，相较非编译型语言，编译型语言 Go 有很大的优势。")],-1),M=l("h3",{id:"java",tabindex:"-1"},[e("Java "),l("a",{class:"header-anchor",href:"#java","aria-label":'Permalink to "Java"'},"​")],-1),A=l("ol",null,[l("li",null,"在 Go 问世之前，Java 是很多分布网络项目的开发语言。但 Go 问世后马上因为其在 goroutine 上的优势（高效易用）马上变成一众网络工具的首选。虽然 Java 对异步的支持很早（ NIO ）也很丰富，最近 JDK 19 的虚拟线程也相当惊艳。"),l("li",null,"Java的启动时间是一直是一大诟病，虽然也在优化。另外，最近 Java 也在 GraalVM 方面做更多的编译尝试。"),l("li",null,"Java 的 垃圾收集器 选择更多，开发者可以根据项目特点进行选择和配置。"),l("li",null,"Java 拥有一个极其庞大和成熟的开发者生态。")],-1),w=l("h3",{id:"webassebmly",tabindex:"-1"},[e("WebAssebmly "),l("a",{class:"header-anchor",href:"#webassebmly","aria-label":'Permalink to "WebAssebmly"'},"​")],-1),J=l("ol",null,[l("li",null,[e("最近两年，WebAssembly后端运行时和各种 WASM语言（AssemblyJS）不断问世。最近 来自中国深圳团队的 "),l("a",{href:"https://github.com/moonbitlang/moonbit-docs",target:"_blank",rel:"noreferrer"},"Moonbit"),e(" 更是引起了热议。")]),l("li",null,"利用WASM，选择一种易于使用的语言，配合一个强大的WASM编译器，既有接近编译型的效率，又有解释型语言的灵活和开发效率的优势。"),l("li",null,"我们认为，在技术上，WASM 与 Java 字节码，以及 Go 底层抽象机制一样，其唯一的优势是拥有更高工业界共识，并以存在于主流浏览器当中。得益于开放的技术氛围，在足够工程投入前提下，某项技术取得完全压倒的优势可能不大。因此，技术选型的关键是在于，各个方案的取舍以及运行场景的要求。原生二进制部署的确没有 WASM 当前在后台灵活部署的优势，但其效率上的优势，加上后台集群的同构性，可谓是瑕不掩瑜。而 Go 在没有对性能做出明显妥协的前提下，大大的降低编译语言使用（开发，构建，分发）的难度，在以团队开发为主要模式的后台项目领域中，其优势非常稳固。")],-1),W=l("h2",{id:"进一步阅读",tabindex:"-1"},[e("进一步阅读 "),l("a",{class:"header-anchor",href:"#进一步阅读","aria-label":'Permalink to "进一步阅读"'},"​")],-1),B=l("ul",null,[l("li",null,[e("官方入门教程："),l("a",{href:"https://go.dev/doc/tutorial/getting-started",target:"_blank",rel:"noreferrer"},"Tutorial: Get started with Go - The Go Programming Language")]),l("li",null,[e("官方仓库 "),l("a",{href:"https://github.com/golang/go",target:"_blank",rel:"noreferrer"},"GitHub - golang/go: The Go programming language")]),l("li",null,[l("a",{href:"https://www.topgoer.com/",target:"_blank",rel:"noreferrer"},"前景 · Go语言中文文档")])],-1),F=l("div",{class:"language-sh vp-adaptive-theme"},[l("button",{title:"Copy Code",class:"copy"}),l("span",{class:"lang"},"sh"),l("pre",{class:"shiki github-dark vp-code-dark"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#79B8FF"}},"x"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"env"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"use"),l("span",{style:{color:"#E1E4E8"}}," "),l("span",{style:{color:"#9ECBFF"}},"go")])])]),l("pre",{class:"shiki github-light vp-code-light"},[l("code",null,[l("span",{class:"line"},[l("span",{style:{color:"#005CC5"}},"x"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"env"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"use"),l("span",{style:{color:"#24292E"}}," "),l("span",{style:{color:"#032F62"}},"go")])])])],-1);function N(S,D,I,T,V,$){const a=t("PackagePage");return s(),i("div",null,[r(a,null,{default:o(()=>[g,d]),abstract:o(()=>[u,h,m,p,_,b,k,G,x,f,y,v,P,C,E,M,A,w,J,W,B]),install:o(()=>[F]),_:1})])}const z=n(c,[["render",N]]);export{j as __pageData,z as default};

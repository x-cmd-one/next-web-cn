import{_ as o,C as l,o as p,c as t,H as c,w as n,k as s,a as e}from"./chunks/framework.98e11516.js";const B=JSON.parse('{"title":"node","titleTemplate":"x-cmd 1 分钟快速上手","description":"x-cmd 1 分钟 | node 快速上手 | 一个异步事件驱动的 JavaScript 运行时","frontmatter":{"name":"node","titleTemplate":"x-cmd 1 分钟快速上手","head":[["meta",{"name":"og:title","content":"x-cmd 1 分钟 | node 快速上手"}],["meta",{"name":"og:description","content":"一个异步事件驱动的 JavaScript 运行时"}],["meta",{"name":"description","content":"x-cmd 1 分钟 | node 快速上手 | 一个异步事件驱动的 JavaScript 运行时"}]],"items":[{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">hello-world.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">hello-world.js</span></span></code></pre>\\n</div>","#desc":{"cn":"运行 node 脚本","en":"Run node script"},"desc":"运行 node 脚本"},{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">echo</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">&#39;{&quot;hello&quot;:&quot;world&quot;}&#39;</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #F97583\\">|</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">process-stdin.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">echo</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">&#39;{&quot;hello&quot;:&quot;world&quot;}&#39;</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #D73A49\\">|</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">process-stdin.js</span></span></code></pre>\\n</div>","#desc":{"cn":"使用 node 从 stdin 读取数据并进行处理","en":"Use node to read data from stdin and process it"},"desc":"使用 node 从 stdin 读取数据并进行处理"},{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">process-argv.js</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">hello</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">world</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">process-argv.js</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">hello</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">world</span></span></code></pre>\\n</div>","#desc":{"cn":"获取使用 node 命令传入参数","en":"Obtain parameters passed in using the node command"},"desc":"获取使用 node 命令传入参数"},{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">process-env.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">process-env.js</span></span></code></pre>\\n</div>","#desc":{"cn":"通过 process 模块获取环境变量","en":"Get environment variables through the process module"},"desc":"通过 process 模块获取环境变量"},{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">fs.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">fs.js</span></span></code></pre>\\n</div>","#desc":{"cn":"通过 fs 模块获取当前目录文件列表","en":"Get the current directory file list through the fs module"},"desc":"通过 fs 模块获取当前目录文件列表"},{"cmd":"<div class=\\"language-sh vp-adaptive-theme\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">sh</span><pre v-pre class=\\"shiki github-dark vp-code-dark\\" ><code><span class=\\"line\\"><span style=\\"color: #79B8FF\\">x</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">node</span><span style=\\"color: #E1E4E8\\"> </span><span style=\\"color: #9ECBFF\\">http-app.js</span></span></code></pre><pre v-pre class=\\"shiki github-light vp-code-light\\" ><code><span class=\\"line\\"><span style=\\"color: #005CC5\\">x</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">node</span><span style=\\"color: #24292E\\"> </span><span style=\\"color: #032F62\\">http-app.js</span></span></code></pre>\\n</div>","#desc":{"cn":"搭建一个简单的服务器","en":"Build a simple server"},"desc":"搭建一个简单的服务器"}],"aside":false,"outline":false,"x-term-speg":"1min/node.cn","x-term-name":"node","x-term-desc":"一个异步事件驱动的 JavaScript 运行时","x-term-size":"large","links":[{"type":"pkg","text":"node","link":"/pkg/node"}]},"headers":[],"relativePath":"1min/node.md","filePath":"1min/node.md"}'),r={name:"1min/node.md"},d=s("h1",{id:"node",tabindex:"-1"},[e("node "),s("a",{class:"header-anchor",href:"#node","aria-label":'Permalink to "node"'},"​")],-1),i=s("p",{class:"visually-hidden"}," 一个异步事件驱动的 JavaScript 运行时 ",-1),y=s("p",null,"本教程目标：帮助您快速地了解一些简单且实用的 node.js 用法",-1),h=s("ol",null,[s("li",null,"运行 js 代码：运行 js 脚本文件、从 stdin 中读取 js 代码并执行"),s("li",null,"环境变量与参数处理: 掌握该方法可以帮助您更好地编写普适性更高的自动化脚本"),s("li",null,[e("内置模块的使用: "),s("ul",null,[s("li",null,"使用 process 模块获取传入参数"),s("li",null,"使用 path 模块获取环境变量值"),s("li",null,"使用 fs 模块获取当前目录的文件列表"),s("li",null,"使用 http 模块处理 http 请求")])]),s("li",null,"综合实例：快速地搭建并启用一个简单的服务器")],-1),E=s("p",null,"进一步阅读：",-1),u=s("ul",null,[s("li",null,[e("x-cmd 对于 node 的介绍和快速安装的方法，可以查看: "),s("a",{href:"/pkg/node"},"x-cmd pkg for node")]),s("li",null,[e("x-cmd 对于 node 在 cli 上所作的优化，具体可以查看: "),s("a",{href:"/mod/node"}," module for node ")])],-1);function v(m,F,g,C,k,x){const a=l("OneMinutePage");return p(),t("div",null,[c(a,null,{default:n(()=>[d,i]),abstract:n(()=>[y,h,E,u]),_:1})])}const _=o(r,[["render",v]]);export{B as __pageData,_ as default};
